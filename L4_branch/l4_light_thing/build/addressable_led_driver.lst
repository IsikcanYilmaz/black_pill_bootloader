ARM GAS  /tmp/cc2PL0da.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"addressable_led_driver.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.AddrLED_Init,"ax",%progbits
  18              		.align	1
  19              		.global	AddrLED_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	AddrLED_Init:
  26              	.LFB133:
  27              		.file 1 "Src/addressable_led_driver.c"
   1:Src/addressable_led_driver.c **** 
   2:Src/addressable_led_driver.c **** #include "addressable_led_driver.h"
   3:Src/addressable_led_driver.c **** #include "cmd_shell.h"
   4:Src/addressable_led_driver.c **** #include "main.h"
   5:Src/addressable_led_driver.c **** #include <string.h>
   6:Src/addressable_led_driver.c **** // Driver for the WS2812B based cascading, addressable LEDs
   7:Src/addressable_led_driver.c **** 
   8:Src/addressable_led_driver.c **** /*
   9:Src/addressable_led_driver.c ****  We have 5 different intervals, of which 4 must be followed accurately: T0H, T0L, T1H, T1L. Timings
  10:Src/addressable_led_driver.c **** 
  11:Src/addressable_led_driver.c ****  -Bit 0 1/3 of the period HIGH, 2/3 of the period LOW
  12:Src/addressable_led_driver.c ****  -Bit 1 2/3 of the period HIGH, 1/3 of the period LOW
  13:Src/addressable_led_driver.c ****  -Reset Stay LOW for at least 40 cycles (50us are about 40 periods of 1.25us)
  14:Src/addressable_led_driver.c **** 
  15:Src/addressable_led_driver.c **** Each WS2812B requires 24bits of data to reproduce a color. Each color is, in fact, composed of 3 gr
  16:Src/addressable_led_driver.c **** 
  17:Src/addressable_led_driver.c ****   GREEN[7:0] RED[7:0] BLUE[7:0]
  18:Src/addressable_led_driver.c **** */
  19:Src/addressable_led_driver.c **** 
  20:Src/addressable_led_driver.c **** #define NAIVE_ADDR_LED_START_UPDATES() HAL_TIM_Base_Start_IT(&LED_PANEL_1_TIMER_HANDLE)
  21:Src/addressable_led_driver.c **** #define NAIVE_ADDR_LED_STOP_UPDATES()  HAL_TIM_Base_Stop_IT(&LED_PANEL_1_TIMER_HANDLE)
  22:Src/addressable_led_driver.c **** 
  23:Src/addressable_led_driver.c **** #define ADDR_LED_PWM_START()           HAL_TIM_PWM_Start(&LED_PANEL_1_PWM_TIMER_HANDLE, LED_PANEL_1
  24:Src/addressable_led_driver.c **** #define ADDR_LED_PWM_STOP()            HAL_TIM_PWM_Stop(&LED_PANEL_1_PWM_TIMER_HANDLE, LED_PANEL_1_
  25:Src/addressable_led_driver.c **** 
  26:Src/addressable_led_driver.c **** #define ADDR_LED_PWM_SET_DUTY_CYCLE(d) __HAL_TIM_SET_COMPARE(&LED_PANEL_1_PWM_TIMER_HANDLE, LED_PAN
  27:Src/addressable_led_driver.c **** 
  28:Src/addressable_led_driver.c **** // PWM VALUES THAT MEET WS2812Bs SPECS
  29:Src/addressable_led_driver.c **** #define ADDR_LED_PWM_PSC 2
  30:Src/addressable_led_driver.c **** #define ADDR_LED_PWM_ARR 32
  31:Src/addressable_led_driver.c **** 
ARM GAS  /tmp/cc2PL0da.s 			page 2


  32:Src/addressable_led_driver.c **** // PWM DUTY CYCLE VALUES FOR THE LOGIC HIGH AND LOW CODES
  33:Src/addressable_led_driver.c **** #define ADDR_LED_CODE_HIGH_COMPARE_VAL 23 
  34:Src/addressable_led_driver.c **** #define ADDR_LED_CODE_LOW_COMPARE_VAL  8
  35:Src/addressable_led_driver.c **** 
  36:Src/addressable_led_driver.c **** // PRIVATE VARIBLES -------------------------------------------------
  37:Src/addressable_led_driver.c **** 
  38:Src/addressable_led_driver.c **** uint32_t MICROSECOND_PRESCALER , MILLISECOND_PRESCALER;
  39:Src/addressable_led_driver.c **** 
  40:Src/addressable_led_driver.c **** // PRIVATE FUNCTIONS ------------------------------------------------
  41:Src/addressable_led_driver.c **** 
  42:Src/addressable_led_driver.c **** static void AddrLED_SetPWMPeriodUs(uint16_t ns)
  43:Src/addressable_led_driver.c **** {
  44:Src/addressable_led_driver.c ****   // Set/reset Symbol sending update timer to fire an interrupt
  45:Src/addressable_led_driver.c ****   // Stop and restart timer if it was already running
  46:Src/addressable_led_driver.c ****   bool tmrWasRunning = false;
  47:Src/addressable_led_driver.c ****   if (LED_PANEL_1_PWM_TIMER->CR1 ^ TIM_CR1_CEN)
  48:Src/addressable_led_driver.c ****   {
  49:Src/addressable_led_driver.c ****     tmrWasRunning = true;
  50:Src/addressable_led_driver.c ****     ADDR_LED_PWM_STOP();
  51:Src/addressable_led_driver.c ****   }
  52:Src/addressable_led_driver.c **** 
  53:Src/addressable_led_driver.c ****   // Update autoreload register
  54:Src/addressable_led_driver.c ****   // Timer will generate an IRQ every $ns nanoseconds
  55:Src/addressable_led_driver.c ****   LED_PANEL_1_PWM_TIMER->ARR = ns;
  56:Src/addressable_led_driver.c **** 
  57:Src/addressable_led_driver.c ****   // Generate update event to load new ARR immediately
  58:Src/addressable_led_driver.c ****   LED_PANEL_1_PWM_TIMER->EGR = TIM_EGR_UG;
  59:Src/addressable_led_driver.c **** 
  60:Src/addressable_led_driver.c ****   // Reset counter if timer was running before
  61:Src/addressable_led_driver.c ****   if (tmrWasRunning)
  62:Src/addressable_led_driver.c ****   {
  63:Src/addressable_led_driver.c ****     LED_PANEL_1_PWM_TIMER->CNT = 0x00;
  64:Src/addressable_led_driver.c ****     ADDR_LED_PWM_START();
  65:Src/addressable_led_driver.c ****   }
  66:Src/addressable_led_driver.c **** }
  67:Src/addressable_led_driver.c **** 
  68:Src/addressable_led_driver.c **** // WS2812B Related 
  69:Src/addressable_led_driver.c **** 
  70:Src/addressable_led_driver.c **** // Convert $byte into codes that WS2812B accepts, that we push out via PWM.
  71:Src/addressable_led_driver.c **** // 1 Byte converts into 8 bytes, so make sure $*codes pointer points to a block of memory that has 
  72:Src/addressable_led_driver.c **** static inline void ByteToCodes(uint8_t byte, uint8_t *codes)
  73:Src/addressable_led_driver.c **** {
  74:Src/addressable_led_driver.c ****   for (int b = 0; b < 8; b++)
  75:Src/addressable_led_driver.c ****   {
  76:Src/addressable_led_driver.c ****     *(codes + b) = ((byte & (0x1 << b)) > 0) ? ADDR_LED_CODE_HIGH_COMPARE_VAL : ADDR_LED_CODE_LOW_C
  77:Src/addressable_led_driver.c ****   }
  78:Src/addressable_led_driver.c **** }
  79:Src/addressable_led_driver.c **** 
  80:Src/addressable_led_driver.c **** // Convert a Pixel_t object $p into codes that WS2812B accepts. 
  81:Src/addressable_led_driver.c **** // 1 Byte converts into 8 bytes, a Pixel_t is 3 bytes so make sure $*packet points to a block of me
  82:Src/addressable_led_driver.c **** static inline void PixelToPacket(Pixel_t *p, PixelPacket_t *packet)
  83:Src/addressable_led_driver.c **** {
  84:Src/addressable_led_driver.c ****   ByteToCodes(p->green, &(packet->greenRaw[0]));
  85:Src/addressable_led_driver.c ****   ByteToCodes(p->red, &(packet->redRaw[0]));
  86:Src/addressable_led_driver.c ****   ByteToCodes(p->blue, &(packet->blueRaw[0]));
  87:Src/addressable_led_driver.c **** }
  88:Src/addressable_led_driver.c **** 
ARM GAS  /tmp/cc2PL0da.s 			page 3


  89:Src/addressable_led_driver.c **** // PUBLIC FUNCTIONS -------------------------------------------------
  90:Src/addressable_led_driver.c **** 
  91:Src/addressable_led_driver.c **** void AddrLED_Init(void)
  92:Src/addressable_led_driver.c **** {
  28              		.loc 1 92 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 400
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 E5B0     		sub	sp, sp, #404
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 416
  93:Src/addressable_led_driver.c ****   MICROSECOND_PRESCALER = ((HAL_RCC_GetSysClockFreq() / 1000000) - 1);    // 1000000 Hz
  41              		.loc 1 93 0
  42 0004 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
  43              	.LVL0:
  44 0008 4C4A     		ldr	r2, .L36
  45 000a A2FB0023 		umull	r2, r3, r2, r0
  46 000e 9B0C     		lsrs	r3, r3, #18
  47 0010 013B     		subs	r3, r3, #1
  48 0012 4B4A     		ldr	r2, .L36+4
  49 0014 1360     		str	r3, [r2]
  94:Src/addressable_led_driver.c ****   MILLISECOND_PRESCALER = ((HAL_RCC_GetSysClockFreq() / 1000) - 1);       // 1000 Hz
  50              		.loc 1 94 0
  51 0016 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
  52              	.LVL1:
  53 001a 4A4A     		ldr	r2, .L36+8
  54 001c A2FB0023 		umull	r2, r3, r2, r0
  55 0020 9B09     		lsrs	r3, r3, #6
  56 0022 013B     		subs	r3, r3, #1
  57 0024 484A     		ldr	r2, .L36+12
  58 0026 1360     		str	r3, [r2]
  95:Src/addressable_led_driver.c **** 
  96:Src/addressable_led_driver.c ****   /* ~ Initialize PWM Timer ~
  97:Src/addressable_led_driver.c ****    *
  98:Src/addressable_led_driver.c ****    * OKAY SO:
  99:Src/addressable_led_driver.c ****    * PSC 0, ARR 25, CCR 8  Gives me an update time of ~1440 nanoseconds, HIGH time of ~445 nanoseco
 100:Src/addressable_led_driver.c ****    *                CCR 7                                                HIGH time of ~390 nanoseco
 101:Src/addressable_led_driver.c ****    *                CCR 15                                               HIGH time of ~823 nanoseco
 102:Src/addressable_led_driver.c ****    * 
 103:Src/addressable_led_driver.c ****    * So seems like the Compare values i'll need are 7 and 15, for 0 CODE and 1 CODE respectively.
 104:Src/addressable_led_driver.c ****    *
 105:Src/addressable_led_driver.c ****    * Lets go with this, why not
 106:Src/addressable_led_driver.c ****    *
 107:Src/addressable_led_driver.c ****    */
 108:Src/addressable_led_driver.c **** 
 109:Src/addressable_led_driver.c ****   // Set update event flag so PSC and ARR are loaded
 110:Src/addressable_led_driver.c ****   LED_PANEL_1_PWM_TIMER->PSC = ADDR_LED_PWM_PSC;
  59              		.loc 1 110 0
  60 0028 484B     		ldr	r3, .L36+16
  61 002a 0222     		movs	r2, #2
  62 002c 9A62     		str	r2, [r3, #40]
ARM GAS  /tmp/cc2PL0da.s 			page 4


 111:Src/addressable_led_driver.c ****   LED_PANEL_1_PWM_TIMER->ARR = ADDR_LED_PWM_ARR;
  63              		.loc 1 111 0
  64 002e 2022     		movs	r2, #32
  65 0030 DA62     		str	r2, [r3, #44]
 112:Src/addressable_led_driver.c ****   LED_PANEL_1_PWM_TIMER->EGR = TIM_EGR_UG;
  66              		.loc 1 112 0
  67 0032 0124     		movs	r4, #1
  68 0034 5C61     		str	r4, [r3, #20]
  69              	.LVL2:
 113:Src/addressable_led_driver.c ****   
 114:Src/addressable_led_driver.c ****   //#define PWM_BASE_TEST
 115:Src/addressable_led_driver.c ****   #define PWM_DMA_TEST
 116:Src/addressable_led_driver.c **** 
 117:Src/addressable_led_driver.c ****   #ifdef PWM_BASE_TEST
 118:Src/addressable_led_driver.c ****   ADDR_LED_PWM_START();
 119:Src/addressable_led_driver.c ****   ADDR_LED_PWM_SET_DUTY_CYCLE(10);
 120:Src/addressable_led_driver.c ****   while(1){}
 121:Src/addressable_led_driver.c ****   #endif
 122:Src/addressable_led_driver.c **** 
 123:Src/addressable_led_driver.c ****   #ifdef PWM_DMA_TEST
 124:Src/addressable_led_driver.c ****   //
 125:Src/addressable_led_driver.c ****   uint8_t o = ADDR_LED_CODE_HIGH_COMPARE_VAL;
 126:Src/addressable_led_driver.c ****   uint8_t z = ADDR_LED_CODE_LOW_COMPARE_VAL;
 127:Src/addressable_led_driver.c ****   
 128:Src/addressable_led_driver.c ****   #if 1
 129:Src/addressable_led_driver.c ****   const uint8_t dmaTestPayload[] = {
 130:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 131:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 132:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, o, z,  
 133:Src/addressable_led_driver.c **** 
 134:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 135:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 136:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z, 
 137:Src/addressable_led_driver.c **** 
 138:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 139:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 140:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, o, z, 
 141:Src/addressable_led_driver.c **** 
 142:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 143:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 144:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z, 
 145:Src/addressable_led_driver.c **** 
 146:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 147:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 148:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, o, z, 
 149:Src/addressable_led_driver.c **** 
 150:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 151:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 152:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z, 
 153:Src/addressable_led_driver.c **** 
 154:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 155:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 156:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, o, z, 
 157:Src/addressable_led_driver.c **** 
 158:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 159:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 160:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z, 
ARM GAS  /tmp/cc2PL0da.s 			page 5


 161:Src/addressable_led_driver.c **** 
 162:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 163:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 164:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, o, z, 
 165:Src/addressable_led_driver.c **** 
 166:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 167:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 168:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z, 
 169:Src/addressable_led_driver.c **** 
 170:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 171:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 172:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, o, z, 
 173:Src/addressable_led_driver.c **** 
 174:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 175:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 176:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z, 
 177:Src/addressable_led_driver.c **** 
 178:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 179:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 180:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, o, z, 
 181:Src/addressable_led_driver.c **** 
 182:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 183:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 184:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z, 
 185:Src/addressable_led_driver.c **** 
 186:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 187:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 188:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, o, z, 
 189:Src/addressable_led_driver.c **** 
 190:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, o,
 191:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z,
 192:Src/addressable_led_driver.c ****                                     z, z, z, z, z, z, z, z, 
 193:Src/addressable_led_driver.c **** 
 194:Src/addressable_led_driver.c ****                                     0};
 195:Src/addressable_led_driver.c **** 
 196:Src/addressable_led_driver.c ****   // 16 LEDS, 3 colors, 8 bytes per color, null character at the end
 197:Src/addressable_led_driver.c ****   // 16 * 3 * 8 + 1 = 385
 198:Src/addressable_led_driver.c ****   uint8_t payloadDupeTest[16 * 3 * 8 + 1];
 199:Src/addressable_led_driver.c ****   PixelPacket_t *payloadDupePP = (PixelPacket_t *) &payloadDupeTest;
 200:Src/addressable_led_driver.c **** 
 201:Src/addressable_led_driver.c ****   memset(&payloadDupeTest, 0x0, 16 * 3 * 8 + 1);
  70              		.loc 1 201 0
  71 0036 40F28112 		movw	r2, #385
  72 003a 0021     		movs	r1, #0
  73 003c 03A8     		add	r0, sp, #12
  74              	.LVL3:
  75 003e FFF7FEFF 		bl	memset
  76              	.LVL4:
 202:Src/addressable_led_driver.c ****   Pixel_t color1 = {.red = 0x0, .green = 0x1, .blue = 0x2};
  77              		.loc 1 202 0
  78 0042 434B     		ldr	r3, .L36+20
  79 0044 1B68     		ldr	r3, [r3]
  80 0046 ADF80830 		strh	r3, [sp, #8]	@ movhi
  81 004a 1B0C     		lsrs	r3, r3, #16
  82 004c 8DF80A30 		strb	r3, [sp, #10]
 203:Src/addressable_led_driver.c ****   Pixel_t color2 = {.red = 0x0, .green = 0x1, .blue = 0x0};
  83              		.loc 1 203 0
ARM GAS  /tmp/cc2PL0da.s 			page 6


  84 0050 8DF80440 		strb	r4, [sp, #4]
  85 0054 0021     		movs	r1, #0
  86 0056 8DF80510 		strb	r1, [sp, #5]
  87 005a 8DF80610 		strb	r1, [sp, #6]
  88              	.LVL5:
  89              	.LBB29:
 204:Src/addressable_led_driver.c ****  
 205:Src/addressable_led_driver.c ****   for (int i = 0; i < (16 * 3 * 8) / sizeof(PixelPacket_t); i++)
  90              		.loc 1 205 0
  91 005e 5DE0     		b	.L2
  92              	.LVL6:
  93              	.L25:
  94              	.LBB30:
  95              	.LBB31:
  96              	.LBB32:
  97              	.LBB33:
  98              	.LBB34:
  76:Src/addressable_led_driver.c ****   }
  99              		.loc 1 76 0
 100 0060 0822     		movs	r2, #8
 101              	.L5:
 102 0062 E254     		strb	r2, [r4, r3]
  74:Src/addressable_led_driver.c ****   {
 103              		.loc 1 74 0
 104 0064 0133     		adds	r3, r3, #1
 105              	.LVL7:
 106              	.L4:
 107 0066 072B     		cmp	r3, #7
 108 0068 05DC     		bgt	.L32
  76:Src/addressable_led_driver.c ****   }
 109              		.loc 1 76 0
 110 006a 0122     		movs	r2, #1
 111 006c 9A40     		lsls	r2, r2, r3
 112 006e 1542     		tst	r5, r2
 113 0070 F6D0     		beq	.L25
 114 0072 1722     		movs	r2, #23
 115 0074 F5E7     		b	.L5
 116              	.L32:
 117              	.LVL8:
 118              	.LBE34:
 119              	.LBE33:
  85:Src/addressable_led_driver.c ****   ByteToCodes(p->blue, &(packet->blueRaw[0]));
 120              		.loc 1 85 0
 121 0076 9DF80950 		ldrb	r5, [sp, #9]	@ zero_extendqisi2
 122 007a 00F10804 		add	r4, r0, #8
 123              	.LVL9:
 124              	.LBB36:
 125              	.LBB37:
  74:Src/addressable_led_driver.c ****   {
 126              		.loc 1 74 0
 127 007e 0023     		movs	r3, #0
 128 0080 02E0     		b	.L7
 129              	.LVL10:
 130              	.L26:
  76:Src/addressable_led_driver.c ****   }
 131              		.loc 1 76 0
 132 0082 0822     		movs	r2, #8
ARM GAS  /tmp/cc2PL0da.s 			page 7


 133              	.L8:
 134 0084 E254     		strb	r2, [r4, r3]
  74:Src/addressable_led_driver.c ****   {
 135              		.loc 1 74 0
 136 0086 0133     		adds	r3, r3, #1
 137              	.LVL11:
 138              	.L7:
 139 0088 072B     		cmp	r3, #7
 140 008a 05DC     		bgt	.L33
  76:Src/addressable_led_driver.c ****   }
 141              		.loc 1 76 0
 142 008c 0122     		movs	r2, #1
 143 008e 9A40     		lsls	r2, r2, r3
 144 0090 1542     		tst	r5, r2
 145 0092 F6D0     		beq	.L26
 146 0094 1722     		movs	r2, #23
 147 0096 F5E7     		b	.L8
 148              	.L33:
 149              	.LVL12:
 150              	.LBE37:
 151              	.LBE36:
  86:Src/addressable_led_driver.c **** }
 152              		.loc 1 86 0
 153 0098 9DF80A40 		ldrb	r4, [sp, #10]	@ zero_extendqisi2
 154 009c 1030     		adds	r0, r0, #16
 155              	.LVL13:
 156              	.LBB38:
 157              	.LBB39:
  74:Src/addressable_led_driver.c ****   {
 158              		.loc 1 74 0
 159 009e 0023     		movs	r3, #0
 160 00a0 02E0     		b	.L10
 161              	.LVL14:
 162              	.L27:
  76:Src/addressable_led_driver.c ****   }
 163              		.loc 1 76 0
 164 00a2 0822     		movs	r2, #8
 165              	.L11:
 166 00a4 C254     		strb	r2, [r0, r3]
  74:Src/addressable_led_driver.c ****   {
 167              		.loc 1 74 0
 168 00a6 0133     		adds	r3, r3, #1
 169              	.LVL15:
 170              	.L10:
 171 00a8 072B     		cmp	r3, #7
 172 00aa 36DC     		bgt	.L13
  76:Src/addressable_led_driver.c ****   }
 173              		.loc 1 76 0
 174 00ac 0122     		movs	r2, #1
 175 00ae 9A40     		lsls	r2, r2, r3
 176 00b0 1442     		tst	r4, r2
 177 00b2 F6D0     		beq	.L27
 178 00b4 1722     		movs	r2, #23
 179 00b6 F5E7     		b	.L11
 180              	.LVL16:
 181              	.L3:
 182              	.LBE39:
ARM GAS  /tmp/cc2PL0da.s 			page 8


 183              	.LBE38:
 184              	.LBE32:
 185              	.LBE31:
 186              	.LBB42:
 187              	.LBB43:
  84:Src/addressable_led_driver.c ****   ByteToCodes(p->red, &(packet->redRaw[0]));
 188              		.loc 1 84 0
 189 00b8 9DF80450 		ldrb	r5, [sp, #4]	@ zero_extendqisi2
 190 00bc 0446     		mov	r4, r0
 191              	.LVL17:
 192              	.LBB44:
 193              	.LBB45:
  74:Src/addressable_led_driver.c ****   {
 194              		.loc 1 74 0
 195 00be 0023     		movs	r3, #0
 196              	.LVL18:
 197 00c0 02E0     		b	.L14
 198              	.LVL19:
 199              	.L28:
  76:Src/addressable_led_driver.c ****   }
 200              		.loc 1 76 0
 201 00c2 0822     		movs	r2, #8
 202              	.L15:
 203 00c4 E254     		strb	r2, [r4, r3]
  74:Src/addressable_led_driver.c ****   {
 204              		.loc 1 74 0
 205 00c6 0133     		adds	r3, r3, #1
 206              	.LVL20:
 207              	.L14:
 208 00c8 072B     		cmp	r3, #7
 209 00ca 05DC     		bgt	.L34
  76:Src/addressable_led_driver.c ****   }
 210              		.loc 1 76 0
 211 00cc 0122     		movs	r2, #1
 212 00ce 9A40     		lsls	r2, r2, r3
 213 00d0 1542     		tst	r5, r2
 214 00d2 F6D0     		beq	.L28
 215 00d4 1722     		movs	r2, #23
 216 00d6 F5E7     		b	.L15
 217              	.L34:
 218              	.LVL21:
 219              	.LBE45:
 220              	.LBE44:
  85:Src/addressable_led_driver.c ****   ByteToCodes(p->blue, &(packet->blueRaw[0]));
 221              		.loc 1 85 0
 222 00d8 9DF80550 		ldrb	r5, [sp, #5]	@ zero_extendqisi2
 223 00dc 00F10804 		add	r4, r0, #8
 224              	.LVL22:
 225              	.LBB46:
 226              	.LBB47:
  74:Src/addressable_led_driver.c ****   {
 227              		.loc 1 74 0
 228 00e0 0023     		movs	r3, #0
 229 00e2 02E0     		b	.L17
 230              	.LVL23:
 231              	.L29:
  76:Src/addressable_led_driver.c ****   }
ARM GAS  /tmp/cc2PL0da.s 			page 9


 232              		.loc 1 76 0
 233 00e4 0822     		movs	r2, #8
 234              	.L18:
 235 00e6 E254     		strb	r2, [r4, r3]
  74:Src/addressable_led_driver.c ****   {
 236              		.loc 1 74 0
 237 00e8 0133     		adds	r3, r3, #1
 238              	.LVL24:
 239              	.L17:
 240 00ea 072B     		cmp	r3, #7
 241 00ec 05DC     		bgt	.L35
  76:Src/addressable_led_driver.c ****   }
 242              		.loc 1 76 0
 243 00ee 0122     		movs	r2, #1
 244 00f0 9A40     		lsls	r2, r2, r3
 245 00f2 1542     		tst	r5, r2
 246 00f4 F6D0     		beq	.L29
 247 00f6 1722     		movs	r2, #23
 248 00f8 F5E7     		b	.L18
 249              	.L35:
 250              	.LVL25:
 251              	.LBE47:
 252              	.LBE46:
  86:Src/addressable_led_driver.c **** }
 253              		.loc 1 86 0
 254 00fa 9DF80640 		ldrb	r4, [sp, #6]	@ zero_extendqisi2
 255 00fe 1030     		adds	r0, r0, #16
 256              	.LVL26:
 257              	.LBB48:
 258              	.LBB49:
  74:Src/addressable_led_driver.c ****   {
 259              		.loc 1 74 0
 260 0100 0023     		movs	r3, #0
 261 0102 02E0     		b	.L20
 262              	.LVL27:
 263              	.L30:
  76:Src/addressable_led_driver.c ****   }
 264              		.loc 1 76 0
 265 0104 0822     		movs	r2, #8
 266              	.L21:
 267 0106 C254     		strb	r2, [r0, r3]
  74:Src/addressable_led_driver.c ****   {
 268              		.loc 1 74 0
 269 0108 0133     		adds	r3, r3, #1
 270              	.LVL28:
 271              	.L20:
 272 010a 072B     		cmp	r3, #7
 273 010c 05DC     		bgt	.L13
  76:Src/addressable_led_driver.c ****   }
 274              		.loc 1 76 0
 275 010e 0122     		movs	r2, #1
 276 0110 9A40     		lsls	r2, r2, r3
 277 0112 1442     		tst	r4, r2
 278 0114 F6D0     		beq	.L30
 279 0116 1722     		movs	r2, #23
 280 0118 F5E7     		b	.L21
 281              	.LVL29:
ARM GAS  /tmp/cc2PL0da.s 			page 10


 282              	.L13:
 283              	.LBE49:
 284              	.LBE48:
 285              	.LBE43:
 286              	.LBE42:
 287              	.LBE30:
 288              		.loc 1 205 0 discriminator 2
 289 011a 0131     		adds	r1, r1, #1
 290              	.LVL30:
 291              	.L2:
 292              		.loc 1 205 0 is_stmt 0 discriminator 1
 293 011c 0F29     		cmp	r1, #15
 294 011e 0CD8     		bhi	.L24
 295              	.LBB51:
 206:Src/addressable_led_driver.c ****   {
 207:Src/addressable_led_driver.c ****     PixelPacket_t *currPixel = payloadDupePP + i;
 296              		.loc 1 207 0 is_stmt 1
 297 0120 01EB4103 		add	r3, r1, r1, lsl #1
 298 0124 D800     		lsls	r0, r3, #3
 299 0126 03AB     		add	r3, sp, #12
 300              	.LVL31:
 301 0128 1844     		add	r0, r0, r3
 302              	.LVL32:
 208:Src/addressable_led_driver.c ****     if (i % 2)
 303              		.loc 1 208 0
 304 012a 11F0010F 		tst	r1, #1
 305 012e C3D0     		beq	.L3
 306              	.LVL33:
 307              	.LBB50:
 308              	.LBB41:
  84:Src/addressable_led_driver.c ****   ByteToCodes(p->red, &(packet->redRaw[0]));
 309              		.loc 1 84 0
 310 0130 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 311 0134 0446     		mov	r4, r0
 312              	.LVL34:
 313              	.LBB40:
 314              	.LBB35:
  74:Src/addressable_led_driver.c ****   {
 315              		.loc 1 74 0
 316 0136 0023     		movs	r3, #0
 317              	.LVL35:
 318 0138 95E7     		b	.L4
 319              	.LVL36:
 320              	.L24:
 321 013a FEE7     		b	.L24
 322              	.L37:
 323              		.align	2
 324              	.L36:
 325 013c 83DE1B43 		.word	1125899907
 326 0140 00000000 		.word	MICROSECOND_PRESCALER
 327 0144 D34D6210 		.word	274877907
 328 0148 00000000 		.word	MILLISECOND_PRESCALER
 329 014c 00040040 		.word	1073742848
 330 0150 00000000 		.word	.LANCHOR0
 331              	.LBE35:
 332              	.LBE40:
 333              	.LBE41:
ARM GAS  /tmp/cc2PL0da.s 			page 11


 334              	.LBE50:
 335              	.LBE51:
 336              	.LBE29:
 337              		.cfi_endproc
 338              	.LFE133:
 340              		.section	.text.AddrLED_SanityTest,"ax",%progbits
 341              		.align	1
 342              		.global	AddrLED_SanityTest
 343              		.syntax unified
 344              		.thumb
 345              		.thumb_func
 346              		.fpu fpv4-sp-d16
 348              	AddrLED_SanityTest:
 349              	.LFB134:
 209:Src/addressable_led_driver.c ****     {
 210:Src/addressable_led_driver.c ****       PixelToPacket(&color1, currPixel);
 211:Src/addressable_led_driver.c ****     }
 212:Src/addressable_led_driver.c ****     else
 213:Src/addressable_led_driver.c ****     {
 214:Src/addressable_led_driver.c ****       PixelToPacket(&color2, currPixel);
 215:Src/addressable_led_driver.c ****     }
 216:Src/addressable_led_driver.c ****   }
 217:Src/addressable_led_driver.c **** 
 218:Src/addressable_led_driver.c ****   while(1){}
 219:Src/addressable_led_driver.c **** 
 220:Src/addressable_led_driver.c ****   #else
 221:Src/addressable_led_driver.c ****   const uint8_t dmaTestPayload[] = {o, z, 1, 1, 1, 1, 0};
 222:Src/addressable_led_driver.c ****   #endif
 223:Src/addressable_led_driver.c ****   //const uint8_t dmaTestPayload[] = {10, 1, 1, 1, 0};
 224:Src/addressable_led_driver.c ****   //HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Leng
 225:Src/addressable_led_driver.c ****     HAL_TIM_PWM_Start_DMA(&LED_PANEL_1_PWM_TIMER_HANDLE, LED_PANEL_1_PWM_TIMER_CHANNEL, (uint32_t *
 226:Src/addressable_led_driver.c ****   HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 227:Src/addressable_led_driver.c ****   while(1){
 228:Src/addressable_led_driver.c ****   }
 229:Src/addressable_led_driver.c ****   #endif
 230:Src/addressable_led_driver.c **** 
 231:Src/addressable_led_driver.c ****   AddrLED_SanityTest();
 232:Src/addressable_led_driver.c ****   while(1){}
 233:Src/addressable_led_driver.c **** }
 234:Src/addressable_led_driver.c **** 
 235:Src/addressable_led_driver.c **** void AddrLED_SanityTest(void)
 236:Src/addressable_led_driver.c **** {
 350              		.loc 1 236 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 48
 353              		@ frame_needed = 1, uses_anonymous_args = 0
 354 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 355              	.LCFI2:
 356              		.cfi_def_cfa_offset 20
 357              		.cfi_offset 4, -20
 358              		.cfi_offset 5, -16
 359              		.cfi_offset 6, -12
 360              		.cfi_offset 7, -8
 361              		.cfi_offset 14, -4
 362 0002 8DB0     		sub	sp, sp, #52
 363              	.LCFI3:
 364              		.cfi_def_cfa_offset 72
ARM GAS  /tmp/cc2PL0da.s 			page 12


 365 0004 00AF     		add	r7, sp, #0
 366              	.LCFI4:
 367              		.cfi_def_cfa_register 7
 368              	.LVL37:
 237:Src/addressable_led_driver.c ****   // Initialize test Pixel array
 238:Src/addressable_led_driver.c ****   const uint8_t testSize = 4 * 4;
 239:Src/addressable_led_driver.c ****   Pixel_t test[testSize];
 240:Src/addressable_led_driver.c ****   memset(&test, 0x0, sizeof(test));
 369              		.loc 1 240 0
 370 0006 3022     		movs	r2, #48
 371 0008 0021     		movs	r1, #0
 372 000a 3846     		mov	r0, r7
 373              	.LVL38:
 374 000c FFF7FEFF 		bl	memset
 375              	.LVL39:
 376              	.LBB52:
 241:Src/addressable_led_driver.c ****   for (int i = 0; i < testSize; i++)
 377              		.loc 1 241 0
 378 0010 0023     		movs	r3, #0
 379 0012 0DE0     		b	.L39
 380              	.LVL40:
 381              	.L40:
 242:Src/addressable_led_driver.c ****   {
 243:Src/addressable_led_driver.c ****     if (i < 4)
 244:Src/addressable_led_driver.c ****       test[i] = (Pixel_t) {0, 0, 0xff};
 245:Src/addressable_led_driver.c ****     else if (i <= 8)
 246:Src/addressable_led_driver.c ****       test[i] = (Pixel_t) {0, 0xff, 0};
 247:Src/addressable_led_driver.c ****     else if (i <= 12)
 248:Src/addressable_led_driver.c ****       test[i] = (Pixel_t) {0xff, 0, 0};
 249:Src/addressable_led_driver.c ****     test[i] = (Pixel_t) {0, 0xff, 0};
 382              		.loc 1 249 0 discriminator 2
 383 0014 03EB4302 		add	r2, r3, r3, lsl #1
 384 0018 07F13001 		add	r1, r7, #48
 385 001c 0A44     		add	r2, r2, r1
 386 001e 0021     		movs	r1, #0
 387 0020 02F8301C 		strb	r1, [r2, #-48]
 388 0024 FF20     		movs	r0, #255
 389 0026 02F82F0C 		strb	r0, [r2, #-47]
 390 002a 02F82E1C 		strb	r1, [r2, #-46]
 241:Src/addressable_led_driver.c ****   for (int i = 0; i < testSize; i++)
 391              		.loc 1 241 0 discriminator 2
 392 002e 0133     		adds	r3, r3, #1
 393              	.LVL41:
 394              	.L39:
 241:Src/addressable_led_driver.c ****   for (int i = 0; i < testSize; i++)
 395              		.loc 1 241 0 is_stmt 0 discriminator 1
 396 0030 0F2B     		cmp	r3, #15
 397 0032 EFDD     		ble	.L40
 398              	.LBE52:
 250:Src/addressable_led_driver.c ****   }
 251:Src/addressable_led_driver.c ****   
 252:Src/addressable_led_driver.c ****   // Initialize payload
 253:Src/addressable_led_driver.c ****   uint8_t test1Payload[3 * 8 * testSize + 1];
 399              		.loc 1 253 0 is_stmt 1
 400 0034 E2B0     		sub	sp, sp, #392
 401              	.LVL42:
 402 0036 6C46     		mov	r4, sp
ARM GAS  /tmp/cc2PL0da.s 			page 13


 403              	.LVL43:
 254:Src/addressable_led_driver.c ****   uint8_t test1PayloadHead = 0;
 255:Src/addressable_led_driver.c ****   memset(&test1Payload, 0x0, sizeof(test1Payload));
 404              		.loc 1 255 0
 405 0038 40F28112 		movw	r2, #385
 406 003c 0021     		movs	r1, #0
 407 003e 6846     		mov	r0, sp
 408 0040 FFF7FEFF 		bl	memset
 409              	.LVL44:
 410              	.LBB53:
 256:Src/addressable_led_driver.c ****   
 257:Src/addressable_led_driver.c ****   #define BREAKEARLY false
 258:Src/addressable_led_driver.c ****   // Go thru all Pixel_t objects
 259:Src/addressable_led_driver.c ****   for (int i = 0; i < testSize; i++)
 411              		.loc 1 259 0
 412 0044 0026     		movs	r6, #0
 413              	.LBE53:
 254:Src/addressable_led_driver.c ****   uint8_t test1PayloadHead = 0;
 414              		.loc 1 254 0
 415 0046 3346     		mov	r3, r6
 416              	.LBB60:
 417              		.loc 1 259 0
 418 0048 16E0     		b	.L41
 419              	.LVL45:
 420              	.L48:
 421              	.LBB54:
 422              	.LBB55:
 423              	.LBB56:
 260:Src/addressable_led_driver.c ****   {
 261:Src/addressable_led_driver.c ****     // Go thru all bytes 
 262:Src/addressable_led_driver.c ****     for (int j = 0; j < sizeof(Pixel_t); j++)
 263:Src/addressable_led_driver.c ****     {
 264:Src/addressable_led_driver.c ****       uint8_t currSourceByte = *((uint8_t *) &test[i] + j);
 265:Src/addressable_led_driver.c ****       // Go thru all bits
 266:Src/addressable_led_driver.c ****       for (int b = 0; b < 8; b++)
 267:Src/addressable_led_driver.c ****       {
 268:Src/addressable_led_driver.c ****        *((uint8_t *) &test1Payload + test1PayloadHead) = ((currSourceByte) & 0x1 << b) > 0 ? ADDR_L
 424              		.loc 1 268 0
 425 004a 0821     		movs	r1, #8
 426              	.L43:
 427              		.loc 1 268 0 is_stmt 0 discriminator 4
 428 004c E154     		strb	r1, [r4, r3]
 269:Src/addressable_led_driver.c ****        test1PayloadHead++;
 429              		.loc 1 269 0 is_stmt 1 discriminator 4
 430 004e 0133     		adds	r3, r3, #1
 431              	.LVL46:
 432 0050 DBB2     		uxtb	r3, r3
 433              	.LVL47:
 266:Src/addressable_led_driver.c ****       {
 434              		.loc 1 266 0 discriminator 4
 435 0052 0132     		adds	r2, r2, #1
 436              	.LVL48:
 437              	.L42:
 266:Src/addressable_led_driver.c ****       {
 438              		.loc 1 266 0 is_stmt 0 discriminator 2
 439 0054 072A     		cmp	r2, #7
 440 0056 05DC     		bgt	.L51
ARM GAS  /tmp/cc2PL0da.s 			page 14


 268:Src/addressable_led_driver.c ****        test1PayloadHead++;
 441              		.loc 1 268 0 is_stmt 1
 442 0058 0121     		movs	r1, #1
 443 005a 9140     		lsls	r1, r1, r2
 444 005c 0842     		tst	r0, r1
 445 005e F4D0     		beq	.L48
 446 0060 1721     		movs	r1, #23
 447 0062 F3E7     		b	.L43
 448              	.L51:
 449              	.LBE56:
 450              	.LBE55:
 262:Src/addressable_led_driver.c ****     {
 451              		.loc 1 262 0 discriminator 2
 452 0064 0135     		adds	r5, r5, #1
 453              	.LVL49:
 454              	.L46:
 262:Src/addressable_led_driver.c ****     {
 455              		.loc 1 262 0 is_stmt 0 discriminator 1
 456 0066 022D     		cmp	r5, #2
 457 0068 05D8     		bhi	.L52
 458              	.LBB58:
 264:Src/addressable_led_driver.c ****       // Go thru all bits
 459              		.loc 1 264 0 is_stmt 1
 460 006a 06EB4602 		add	r2, r6, r6, lsl #1
 461 006e 3A44     		add	r2, r2, r7
 462 0070 505D     		ldrb	r0, [r2, r5]	@ zero_extendqisi2
 463              	.LVL50:
 464              	.LBB57:
 266:Src/addressable_led_driver.c ****       {
 465              		.loc 1 266 0
 466 0072 0022     		movs	r2, #0
 467 0074 EEE7     		b	.L42
 468              	.LVL51:
 469              	.L52:
 470              	.LBE57:
 471              	.LBE58:
 472              	.LBE54:
 259:Src/addressable_led_driver.c ****   {
 473              		.loc 1 259 0 discriminator 2
 474 0076 0136     		adds	r6, r6, #1
 475              	.LVL52:
 476              	.L41:
 259:Src/addressable_led_driver.c ****   {
 477              		.loc 1 259 0 is_stmt 0 discriminator 1
 478 0078 0F2E     		cmp	r6, #15
 479 007a 01DC     		bgt	.L53
 480              	.LBB59:
 262:Src/addressable_led_driver.c ****     {
 481              		.loc 1 262 0 is_stmt 1
 482 007c 0025     		movs	r5, #0
 483 007e F2E7     		b	.L46
 484              	.L53:
 485              	.LBE59:
 486              	.LBE60:
 270:Src/addressable_led_driver.c ****       }
 271:Src/addressable_led_driver.c ****     }
 272:Src/addressable_led_driver.c ****     #if BREAKEARLY
ARM GAS  /tmp/cc2PL0da.s 			page 15


 273:Src/addressable_led_driver.c ****     if (i == 3)
 274:Src/addressable_led_driver.c ****       break;
 275:Src/addressable_led_driver.c ****     #endif
 276:Src/addressable_led_driver.c ****   }
 277:Src/addressable_led_driver.c ****   
 278:Src/addressable_led_driver.c ****   HAL_TIM_PWM_Start_DMA(&LED_PANEL_1_PWM_TIMER_HANDLE, LED_PANEL_1_PWM_TIMER_CHANNEL, (uint32_t *) 
 487              		.loc 1 278 0
 488 0080 40F28113 		movw	r3, #385
 489              	.LVL53:
 490 0084 2246     		mov	r2, r4
 491 0086 0C21     		movs	r1, #12
 492 0088 0148     		ldr	r0, .L54
 493 008a FFF7FEFF 		bl	HAL_TIM_PWM_Start_DMA
 494              	.LVL54:
 495              	.L47:
 496 008e FEE7     		b	.L47
 497              	.L55:
 498              		.align	2
 499              	.L54:
 500 0090 00000000 		.word	htim3
 501              		.cfi_endproc
 502              	.LFE134:
 504              		.section	.text.AddrLED_StartPWM,"ax",%progbits
 505              		.align	1
 506              		.global	AddrLED_StartPWM
 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
 510              		.fpu fpv4-sp-d16
 512              	AddrLED_StartPWM:
 513              	.LFB135:
 279:Src/addressable_led_driver.c ****   bool block = true;
 280:Src/addressable_led_driver.c ****   while (block) {}
 281:Src/addressable_led_driver.c **** }
 282:Src/addressable_led_driver.c **** 
 283:Src/addressable_led_driver.c **** void AddrLED_StartPWM(void)
 284:Src/addressable_led_driver.c **** {
 514              		.loc 1 284 0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518 0000 08B5     		push	{r3, lr}
 519              	.LCFI5:
 520              		.cfi_def_cfa_offset 8
 521              		.cfi_offset 3, -8
 522              		.cfi_offset 14, -4
 285:Src/addressable_led_driver.c ****   ADDR_LED_PWM_START();
 523              		.loc 1 285 0
 524 0002 0C21     		movs	r1, #12
 525 0004 0148     		ldr	r0, .L58
 526 0006 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 527              	.LVL55:
 286:Src/addressable_led_driver.c **** }
 528              		.loc 1 286 0
 529 000a 08BD     		pop	{r3, pc}
 530              	.L59:
 531              		.align	2
ARM GAS  /tmp/cc2PL0da.s 			page 16


 532              	.L58:
 533 000c 00000000 		.word	htim3
 534              		.cfi_endproc
 535              	.LFE135:
 537              		.section	.text.AddrLED_StopPWM,"ax",%progbits
 538              		.align	1
 539              		.global	AddrLED_StopPWM
 540              		.syntax unified
 541              		.thumb
 542              		.thumb_func
 543              		.fpu fpv4-sp-d16
 545              	AddrLED_StopPWM:
 546              	.LFB136:
 287:Src/addressable_led_driver.c **** 
 288:Src/addressable_led_driver.c **** void AddrLED_StopPWM(void)
 289:Src/addressable_led_driver.c **** {
 547              		.loc 1 289 0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 0
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 08B5     		push	{r3, lr}
 552              	.LCFI6:
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 3, -8
 555              		.cfi_offset 14, -4
 290:Src/addressable_led_driver.c ****   ADDR_LED_PWM_STOP();
 556              		.loc 1 290 0
 557 0002 0C21     		movs	r1, #12
 558 0004 0148     		ldr	r0, .L62
 559 0006 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 560              	.LVL56:
 291:Src/addressable_led_driver.c **** }
 561              		.loc 1 291 0
 562 000a 08BD     		pop	{r3, pc}
 563              	.L63:
 564              		.align	2
 565              	.L62:
 566 000c 00000000 		.word	htim3
 567              		.cfi_endproc
 568              	.LFE136:
 570              		.section	.text.AddrLED_InitNaive,"ax",%progbits
 571              		.align	1
 572              		.global	AddrLED_InitNaive
 573              		.syntax unified
 574              		.thumb
 575              		.thumb_func
 576              		.fpu fpv4-sp-d16
 578              	AddrLED_InitNaive:
 579              	.LFB137:
 292:Src/addressable_led_driver.c **** 
 293:Src/addressable_led_driver.c **** void AddrLED_InitNaive(void)
 294:Src/addressable_led_driver.c **** {
 580              		.loc 1 294 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              		@ link register save eliminated.
ARM GAS  /tmp/cc2PL0da.s 			page 17


 295:Src/addressable_led_driver.c **** 
 296:Src/addressable_led_driver.c **** }
 585              		.loc 1 296 0
 586 0000 7047     		bx	lr
 587              		.cfi_endproc
 588              	.LFE137:
 590              		.section	.text.AddrLED_SendColor,"ax",%progbits
 591              		.align	1
 592              		.global	AddrLED_SendColor
 593              		.syntax unified
 594              		.thumb
 595              		.thumb_func
 596              		.fpu fpv4-sp-d16
 598              	AddrLED_SendColor:
 599              	.LFB138:
 297:Src/addressable_led_driver.c **** 
 298:Src/addressable_led_driver.c **** void AddrLED_SendColor(uint8_t red, uint8_t green, uint8_t blue)
 299:Src/addressable_led_driver.c **** {
 600              		.loc 1 299 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604              		@ link register save eliminated.
 605              	.LVL57:
 300:Src/addressable_led_driver.c **** 
 301:Src/addressable_led_driver.c **** }
 606              		.loc 1 301 0
 607 0000 7047     		bx	lr
 608              		.cfi_endproc
 609              	.LFE138:
 611              		.section	.text.AddrLED_SendReset,"ax",%progbits
 612              		.align	1
 613              		.global	AddrLED_SendReset
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 617              		.fpu fpv4-sp-d16
 619              	AddrLED_SendReset:
 620              	.LFB139:
 302:Src/addressable_led_driver.c **** 
 303:Src/addressable_led_driver.c **** void AddrLED_SendReset(void)
 304:Src/addressable_led_driver.c **** {
 621              		.loc 1 304 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 0
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625              		@ link register save eliminated.
 305:Src/addressable_led_driver.c **** 
 306:Src/addressable_led_driver.c **** }
 626              		.loc 1 306 0
 627 0000 7047     		bx	lr
 628              		.cfi_endproc
 629              	.LFE139:
 631              		.section	.text.AddrLED_NaiveISR,"ax",%progbits
 632              		.align	1
 633              		.global	AddrLED_NaiveISR
 634              		.syntax unified
ARM GAS  /tmp/cc2PL0da.s 			page 18


 635              		.thumb
 636              		.thumb_func
 637              		.fpu fpv4-sp-d16
 639              	AddrLED_NaiveISR:
 640              	.LFB140:
 307:Src/addressable_led_driver.c **** 
 308:Src/addressable_led_driver.c **** // HMM this doesnt work. need to dma pwm this data
 309:Src/addressable_led_driver.c **** void AddrLED_NaiveISR(void)
 310:Src/addressable_led_driver.c **** {
 641              		.loc 1 310 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645 0000 08B5     		push	{r3, lr}
 646              	.LCFI7:
 647              		.cfi_def_cfa_offset 8
 648              		.cfi_offset 3, -8
 649              		.cfi_offset 14, -4
 311:Src/addressable_led_driver.c ****   HAL_GPIO_TogglePin(DEBUG_PIN_GPIO_PORT, DEBUG_PIN_GPIO_PIN);
 650              		.loc 1 311 0
 651 0002 0121     		movs	r1, #1
 652 0004 0148     		ldr	r0, .L69
 653 0006 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 654              	.LVL58:
 312:Src/addressable_led_driver.c **** }
 655              		.loc 1 312 0
 656 000a 08BD     		pop	{r3, pc}
 657              	.L70:
 658              		.align	2
 659              	.L69:
 660 000c 00040048 		.word	1207960576
 661              		.cfi_endproc
 662              	.LFE140:
 664              		.comm	MILLISECOND_PRESCALER,4,4
 665              		.comm	MICROSECOND_PRESCALER,4,4
 666              		.section	.rodata
 667              		.align	2
 668              		.set	.LANCHOR0,. + 0
 669              	.LC0:
 670 0000 01       		.byte	1
 671 0001 00       		.byte	0
 672 0002 02       		.byte	2
 673              		.text
 674              	.Letext0:
 675              		.file 2 "/home/jon/KODMOD/EMBEDDED_TOOLCHAINS/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/inc
 676              		.file 3 "/home/jon/KODMOD/EMBEDDED_TOOLCHAINS/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/inc
 677              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 678              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/system_stm32l4xx.h"
 679              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l452xx.h"
 680              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 681              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 682              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h"
 683              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 684              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 685              		.file 12 "Inc/tim.h"
 686              		.file 13 "Inc/addressable_led_driver.h"
 687              		.file 14 "/home/jon/KODMOD/EMBEDDED_TOOLCHAINS/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/in
ARM GAS  /tmp/cc2PL0da.s 			page 19


 688              		.file 15 "/home/jon/KODMOD/EMBEDDED_TOOLCHAINS/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/in
 689              		.file 16 "/home/jon/KODMOD/EMBEDDED_TOOLCHAINS/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none
 690              		.file 17 "/home/jon/KODMOD/EMBEDDED_TOOLCHAINS/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/in
 691              		.file 18 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 692              		.file 19 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 693              		.file 20 "<built-in>"
ARM GAS  /tmp/cc2PL0da.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 addressable_led_driver.c
     /tmp/cc2PL0da.s:18     .text.AddrLED_Init:0000000000000000 $t
     /tmp/cc2PL0da.s:25     .text.AddrLED_Init:0000000000000000 AddrLED_Init
     /tmp/cc2PL0da.s:325    .text.AddrLED_Init:000000000000013c $d
                            *COM*:0000000000000004 MICROSECOND_PRESCALER
                            *COM*:0000000000000004 MILLISECOND_PRESCALER
     /tmp/cc2PL0da.s:341    .text.AddrLED_SanityTest:0000000000000000 $t
     /tmp/cc2PL0da.s:348    .text.AddrLED_SanityTest:0000000000000000 AddrLED_SanityTest
     /tmp/cc2PL0da.s:500    .text.AddrLED_SanityTest:0000000000000090 $d
     /tmp/cc2PL0da.s:505    .text.AddrLED_StartPWM:0000000000000000 $t
     /tmp/cc2PL0da.s:512    .text.AddrLED_StartPWM:0000000000000000 AddrLED_StartPWM
     /tmp/cc2PL0da.s:533    .text.AddrLED_StartPWM:000000000000000c $d
     /tmp/cc2PL0da.s:538    .text.AddrLED_StopPWM:0000000000000000 $t
     /tmp/cc2PL0da.s:545    .text.AddrLED_StopPWM:0000000000000000 AddrLED_StopPWM
     /tmp/cc2PL0da.s:566    .text.AddrLED_StopPWM:000000000000000c $d
     /tmp/cc2PL0da.s:571    .text.AddrLED_InitNaive:0000000000000000 $t
     /tmp/cc2PL0da.s:578    .text.AddrLED_InitNaive:0000000000000000 AddrLED_InitNaive
     /tmp/cc2PL0da.s:591    .text.AddrLED_SendColor:0000000000000000 $t
     /tmp/cc2PL0da.s:598    .text.AddrLED_SendColor:0000000000000000 AddrLED_SendColor
     /tmp/cc2PL0da.s:612    .text.AddrLED_SendReset:0000000000000000 $t
     /tmp/cc2PL0da.s:619    .text.AddrLED_SendReset:0000000000000000 AddrLED_SendReset
     /tmp/cc2PL0da.s:632    .text.AddrLED_NaiveISR:0000000000000000 $t
     /tmp/cc2PL0da.s:639    .text.AddrLED_NaiveISR:0000000000000000 AddrLED_NaiveISR
     /tmp/cc2PL0da.s:660    .text.AddrLED_NaiveISR:000000000000000c $d
     /tmp/cc2PL0da.s:667    .rodata:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_RCC_GetSysClockFreq
memset
HAL_TIM_PWM_Start_DMA
htim3
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
HAL_GPIO_TogglePin
