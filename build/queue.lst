ARM GAS  /var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Queue_Init,"ax",%progbits
  18              		.align	1
  19              		.global	Queue_Init
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	Queue_Init:
  27              	.LFB0:
  28              		.file 1 "Src/queue.c"
   1:Src/queue.c   **** #include "queue.h"
   2:Src/queue.c   **** 
   3:Src/queue.c   **** /* 
   4:Src/queue.c   ****  * QUEUE API
   5:Src/queue.c   ****  * This file defines queue functionality that can store uint32_ts.
   6:Src/queue.c   ****  * The user must allocate the buffer space the queue will use
   7:Src/queue.c   ****  * outside of the init call, must pass the pointer to the buffer to the init,
   8:Src/queue.c   ****  * and get the queue handle from the init function.
   9:Src/queue.c   ****  */
  10:Src/queue.c   **** 
  11:Src/queue.c   **** Queue_t Queue_Init(uint16_t capacity, uint32_t *bufferPtr)
  12:Src/queue.c   **** {
  29              		.loc 1 12 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 32
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 90B5     		push	{r4, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 89B0     		sub	sp, sp, #36
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 48
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 F860     		str	r0, [r7, #12]
  46 0008 0B46     		mov	r3, r1
ARM GAS  /var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s 			page 2


  47 000a 7A60     		str	r2, [r7, #4]
  48 000c 7B81     		strh	r3, [r7, #10]	@ movhi
  13:Src/queue.c   ****   Queue_t queue;
  14:Src/queue.c   ****   queue.capacity = capacity;
  49              		.loc 1 14 18
  50 000e 7B89     		ldrh	r3, [r7, #10]	@ movhi
  51 0010 BB82     		strh	r3, [r7, #20]	@ movhi
  15:Src/queue.c   ****   queue.queueBuffer = bufferPtr;
  52              		.loc 1 15 21
  53 0012 7B68     		ldr	r3, [r7, #4]
  54 0014 FB61     		str	r3, [r7, #28]
  16:Src/queue.c   ****   queue.head = 0;
  55              		.loc 1 16 14
  56 0016 0023     		movs	r3, #0
  57 0018 3B83     		strh	r3, [r7, #24]	@ movhi
  17:Src/queue.c   ****   queue.tail = 0;
  58              		.loc 1 17 14
  59 001a 0023     		movs	r3, #0
  60 001c 7B83     		strh	r3, [r7, #26]	@ movhi
  18:Src/queue.c   ****   queue.size = 0;
  61              		.loc 1 18 14
  62 001e 0023     		movs	r3, #0
  63 0020 FB82     		strh	r3, [r7, #22]	@ movhi
  19:Src/queue.c   ****   memset(bufferPtr, 0x00, sizeof(uint32_t) * capacity);
  64              		.loc 1 19 3
  65 0022 7B89     		ldrh	r3, [r7, #10]
  66 0024 9B00     		lsls	r3, r3, #2
  67 0026 1A46     		mov	r2, r3
  68 0028 0021     		movs	r1, #0
  69 002a 7868     		ldr	r0, [r7, #4]
  70 002c FFF7FEFF 		bl	memset
  20:Src/queue.c   ****   return queue;
  71              		.loc 1 20 10
  72 0030 FB68     		ldr	r3, [r7, #12]
  73 0032 1C46     		mov	r4, r3
  74 0034 07F11403 		add	r3, r7, #20
  75 0038 93E80700 		ldm	r3, {r0, r1, r2}
  76 003c 84E80700 		stm	r4, {r0, r1, r2}
  21:Src/queue.c   **** }
  77              		.loc 1 21 1
  78 0040 F868     		ldr	r0, [r7, #12]
  79 0042 2437     		adds	r7, r7, #36
  80              	.LCFI3:
  81              		.cfi_def_cfa_offset 12
  82 0044 BD46     		mov	sp, r7
  83              	.LCFI4:
  84              		.cfi_def_cfa_register 13
  85              		@ sp needed
  86 0046 90BD     		pop	{r4, r7, pc}
  87              		.cfi_endproc
  88              	.LFE0:
  90              		.section	.text.Queue_Dequeue,"ax",%progbits
  91              		.align	1
  92              		.global	Queue_Dequeue
  93              		.syntax unified
  94              		.thumb
  95              		.thumb_func
ARM GAS  /var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s 			page 3


  96              		.fpu fpv4-sp-d16
  98              	Queue_Dequeue:
  99              	.LFB1:
  22:Src/queue.c   **** 
  23:Src/queue.c   **** QueueError_e Queue_Dequeue(Queue_t *queue, uint32_t *element)
  24:Src/queue.c   **** {
 100              		.loc 1 24 1
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 8
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              	.LCFI5:
 107              		.cfi_def_cfa_offset 4
 108              		.cfi_offset 7, -4
 109 0002 83B0     		sub	sp, sp, #12
 110              	.LCFI6:
 111              		.cfi_def_cfa_offset 16
 112 0004 00AF     		add	r7, sp, #0
 113              	.LCFI7:
 114              		.cfi_def_cfa_register 7
 115 0006 7860     		str	r0, [r7, #4]
 116 0008 3960     		str	r1, [r7]
  25:Src/queue.c   ****   if (queue->size == 0)
 117              		.loc 1 25 12
 118 000a 7B68     		ldr	r3, [r7, #4]
 119 000c 5B88     		ldrh	r3, [r3, #2]
 120              		.loc 1 25 6
 121 000e 002B     		cmp	r3, #0
 122 0010 01D1     		bne	.L4
  26:Src/queue.c   ****     return QUEUE_EMPTY;
 123              		.loc 1 26 12
 124 0012 0223     		movs	r3, #2
 125 0014 24E0     		b	.L5
 126              	.L4:
  27:Src/queue.c   ****   *element = queue->queueBuffer[queue->head];
 127              		.loc 1 27 19
 128 0016 7B68     		ldr	r3, [r7, #4]
 129 0018 9A68     		ldr	r2, [r3, #8]
 130              		.loc 1 27 38
 131 001a 7B68     		ldr	r3, [r7, #4]
 132 001c 9B88     		ldrh	r3, [r3, #4]
 133              		.loc 1 27 32
 134 001e 9B00     		lsls	r3, r3, #2
 135 0020 1344     		add	r3, r3, r2
 136 0022 1A68     		ldr	r2, [r3]
 137              		.loc 1 27 12
 138 0024 3B68     		ldr	r3, [r7]
 139 0026 1A60     		str	r2, [r3]
  28:Src/queue.c   **** #if CNFG_QUEUE_RESET_AFTER_DEQUEUE
  29:Src/queue.c   ****   queue->queueBuffer[queue->head] = 0x0;
 140              		.loc 1 29 8
 141 0028 7B68     		ldr	r3, [r7, #4]
 142 002a 9A68     		ldr	r2, [r3, #8]
 143              		.loc 1 29 27
 144 002c 7B68     		ldr	r3, [r7, #4]
 145 002e 9B88     		ldrh	r3, [r3, #4]
ARM GAS  /var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s 			page 4


 146              		.loc 1 29 21
 147 0030 9B00     		lsls	r3, r3, #2
 148 0032 1344     		add	r3, r3, r2
 149              		.loc 1 29 35
 150 0034 0022     		movs	r2, #0
 151 0036 1A60     		str	r2, [r3]
  30:Src/queue.c   **** #endif
  31:Src/queue.c   ****   queue->head = (queue->head + 1) % queue->capacity;
 152              		.loc 1 31 23
 153 0038 7B68     		ldr	r3, [r7, #4]
 154 003a 9B88     		ldrh	r3, [r3, #4]
 155              		.loc 1 31 30
 156 003c 0133     		adds	r3, r3, #1
 157              		.loc 1 31 42
 158 003e 7A68     		ldr	r2, [r7, #4]
 159 0040 1288     		ldrh	r2, [r2]
 160              		.loc 1 31 35
 161 0042 93FBF2F1 		sdiv	r1, r3, r2
 162 0046 02FB01F2 		mul	r2, r2, r1
 163 004a 9B1A     		subs	r3, r3, r2
 164              		.loc 1 31 15
 165 004c 9AB2     		uxth	r2, r3
 166 004e 7B68     		ldr	r3, [r7, #4]
 167 0050 9A80     		strh	r2, [r3, #4]	@ movhi
  32:Src/queue.c   ****   queue->size--;
 168              		.loc 1 32 8
 169 0052 7B68     		ldr	r3, [r7, #4]
 170 0054 5B88     		ldrh	r3, [r3, #2]
 171              		.loc 1 32 14
 172 0056 013B     		subs	r3, r3, #1
 173 0058 9AB2     		uxth	r2, r3
 174 005a 7B68     		ldr	r3, [r7, #4]
 175 005c 5A80     		strh	r2, [r3, #2]	@ movhi
  33:Src/queue.c   ****   return NO_ERROR;
 176              		.loc 1 33 10
 177 005e 0023     		movs	r3, #0
 178              	.L5:
  34:Src/queue.c   **** }
 179              		.loc 1 34 1
 180 0060 1846     		mov	r0, r3
 181 0062 0C37     		adds	r7, r7, #12
 182              	.LCFI8:
 183              		.cfi_def_cfa_offset 4
 184 0064 BD46     		mov	sp, r7
 185              	.LCFI9:
 186              		.cfi_def_cfa_register 13
 187              		@ sp needed
 188 0066 5DF8047B 		ldr	r7, [sp], #4
 189              	.LCFI10:
 190              		.cfi_restore 7
 191              		.cfi_def_cfa_offset 0
 192 006a 7047     		bx	lr
 193              		.cfi_endproc
 194              	.LFE1:
 196              		.section	.text.Queue_Enqueue,"ax",%progbits
 197              		.align	1
 198              		.global	Queue_Enqueue
ARM GAS  /var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s 			page 5


 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv4-sp-d16
 204              	Queue_Enqueue:
 205              	.LFB2:
  35:Src/queue.c   **** 
  36:Src/queue.c   **** QueueError_e Queue_Enqueue(Queue_t *queue, uint32_t element)
  37:Src/queue.c   **** {
 206              		.loc 1 37 1
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 1, uses_anonymous_args = 0
 210              		@ link register save eliminated.
 211 0000 80B4     		push	{r7}
 212              	.LCFI11:
 213              		.cfi_def_cfa_offset 4
 214              		.cfi_offset 7, -4
 215 0002 83B0     		sub	sp, sp, #12
 216              	.LCFI12:
 217              		.cfi_def_cfa_offset 16
 218 0004 00AF     		add	r7, sp, #0
 219              	.LCFI13:
 220              		.cfi_def_cfa_register 7
 221 0006 7860     		str	r0, [r7, #4]
 222 0008 3960     		str	r1, [r7]
  38:Src/queue.c   ****   if (queue->size == queue->capacity)
 223              		.loc 1 38 12
 224 000a 7B68     		ldr	r3, [r7, #4]
 225 000c 5A88     		ldrh	r2, [r3, #2]
 226              		.loc 1 38 27
 227 000e 7B68     		ldr	r3, [r7, #4]
 228 0010 1B88     		ldrh	r3, [r3]
 229              		.loc 1 38 6
 230 0012 9A42     		cmp	r2, r3
 231 0014 01D1     		bne	.L7
  39:Src/queue.c   ****     return QUEUE_FULL;
 232              		.loc 1 39 12
 233 0016 0123     		movs	r3, #1
 234 0018 1BE0     		b	.L8
 235              	.L7:
  40:Src/queue.c   ****   queue->queueBuffer[queue->tail] = element;
 236              		.loc 1 40 8
 237 001a 7B68     		ldr	r3, [r7, #4]
 238 001c 9A68     		ldr	r2, [r3, #8]
 239              		.loc 1 40 27
 240 001e 7B68     		ldr	r3, [r7, #4]
 241 0020 DB88     		ldrh	r3, [r3, #6]
 242              		.loc 1 40 21
 243 0022 9B00     		lsls	r3, r3, #2
 244 0024 1344     		add	r3, r3, r2
 245              		.loc 1 40 35
 246 0026 3A68     		ldr	r2, [r7]
 247 0028 1A60     		str	r2, [r3]
  41:Src/queue.c   ****   queue->tail = (queue->tail + 1) % queue->capacity;
 248              		.loc 1 41 23
 249 002a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s 			page 6


 250 002c DB88     		ldrh	r3, [r3, #6]
 251              		.loc 1 41 30
 252 002e 0133     		adds	r3, r3, #1
 253              		.loc 1 41 42
 254 0030 7A68     		ldr	r2, [r7, #4]
 255 0032 1288     		ldrh	r2, [r2]
 256              		.loc 1 41 35
 257 0034 93FBF2F1 		sdiv	r1, r3, r2
 258 0038 02FB01F2 		mul	r2, r2, r1
 259 003c 9B1A     		subs	r3, r3, r2
 260              		.loc 1 41 15
 261 003e 9AB2     		uxth	r2, r3
 262 0040 7B68     		ldr	r3, [r7, #4]
 263 0042 DA80     		strh	r2, [r3, #6]	@ movhi
  42:Src/queue.c   ****   queue->size++;
 264              		.loc 1 42 8
 265 0044 7B68     		ldr	r3, [r7, #4]
 266 0046 5B88     		ldrh	r3, [r3, #2]
 267              		.loc 1 42 14
 268 0048 0133     		adds	r3, r3, #1
 269 004a 9AB2     		uxth	r2, r3
 270 004c 7B68     		ldr	r3, [r7, #4]
 271 004e 5A80     		strh	r2, [r3, #2]	@ movhi
  43:Src/queue.c   ****   return NO_ERROR;
 272              		.loc 1 43 10
 273 0050 0023     		movs	r3, #0
 274              	.L8:
  44:Src/queue.c   **** }
 275              		.loc 1 44 1
 276 0052 1846     		mov	r0, r3
 277 0054 0C37     		adds	r7, r7, #12
 278              	.LCFI14:
 279              		.cfi_def_cfa_offset 4
 280 0056 BD46     		mov	sp, r7
 281              	.LCFI15:
 282              		.cfi_def_cfa_register 13
 283              		@ sp needed
 284 0058 5DF8047B 		ldr	r7, [sp], #4
 285              	.LCFI16:
 286              		.cfi_restore 7
 287              		.cfi_def_cfa_offset 0
 288 005c 7047     		bx	lr
 289              		.cfi_endproc
 290              	.LFE2:
 292              		.section	.text.Queue_GetSize,"ax",%progbits
 293              		.align	1
 294              		.global	Queue_GetSize
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 298              		.fpu fpv4-sp-d16
 300              	Queue_GetSize:
 301              	.LFB3:
  45:Src/queue.c   **** 
  46:Src/queue.c   **** uint16_t Queue_GetSize(Queue_t *queue)
  47:Src/queue.c   **** {
 302              		.loc 1 47 1
ARM GAS  /var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s 			page 7


 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 8
 305              		@ frame_needed = 1, uses_anonymous_args = 0
 306              		@ link register save eliminated.
 307 0000 80B4     		push	{r7}
 308              	.LCFI17:
 309              		.cfi_def_cfa_offset 4
 310              		.cfi_offset 7, -4
 311 0002 83B0     		sub	sp, sp, #12
 312              	.LCFI18:
 313              		.cfi_def_cfa_offset 16
 314 0004 00AF     		add	r7, sp, #0
 315              	.LCFI19:
 316              		.cfi_def_cfa_register 7
 317 0006 7860     		str	r0, [r7, #4]
  48:Src/queue.c   ****   return queue->size;
 318              		.loc 1 48 15
 319 0008 7B68     		ldr	r3, [r7, #4]
 320 000a 5B88     		ldrh	r3, [r3, #2]
  49:Src/queue.c   **** }
 321              		.loc 1 49 1
 322 000c 1846     		mov	r0, r3
 323 000e 0C37     		adds	r7, r7, #12
 324              	.LCFI20:
 325              		.cfi_def_cfa_offset 4
 326 0010 BD46     		mov	sp, r7
 327              	.LCFI21:
 328              		.cfi_def_cfa_register 13
 329              		@ sp needed
 330 0012 5DF8047B 		ldr	r7, [sp], #4
 331              	.LCFI22:
 332              		.cfi_restore 7
 333              		.cfi_def_cfa_offset 0
 334 0016 7047     		bx	lr
 335              		.cfi_endproc
 336              	.LFE3:
 338              		.section	.text.Queue_IsFull,"ax",%progbits
 339              		.align	1
 340              		.global	Queue_IsFull
 341              		.syntax unified
 342              		.thumb
 343              		.thumb_func
 344              		.fpu fpv4-sp-d16
 346              	Queue_IsFull:
 347              	.LFB4:
  50:Src/queue.c   **** 
  51:Src/queue.c   **** bool Queue_IsFull(Queue_t *queue)
  52:Src/queue.c   **** {
 348              		.loc 1 52 1
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 8
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0000 80B4     		push	{r7}
 354              	.LCFI23:
 355              		.cfi_def_cfa_offset 4
 356              		.cfi_offset 7, -4
ARM GAS  /var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s 			page 8


 357 0002 83B0     		sub	sp, sp, #12
 358              	.LCFI24:
 359              		.cfi_def_cfa_offset 16
 360 0004 00AF     		add	r7, sp, #0
 361              	.LCFI25:
 362              		.cfi_def_cfa_register 7
 363 0006 7860     		str	r0, [r7, #4]
  53:Src/queue.c   ****   return (queue->size == queue->capacity);
 364              		.loc 1 53 16
 365 0008 7B68     		ldr	r3, [r7, #4]
 366 000a 5A88     		ldrh	r2, [r3, #2]
 367              		.loc 1 53 31
 368 000c 7B68     		ldr	r3, [r7, #4]
 369 000e 1B88     		ldrh	r3, [r3]
 370              		.loc 1 53 23
 371 0010 9A42     		cmp	r2, r3
 372 0012 0CBF     		ite	eq
 373 0014 0123     		moveq	r3, #1
 374 0016 0023     		movne	r3, #0
 375 0018 DBB2     		uxtb	r3, r3
  54:Src/queue.c   **** }
 376              		.loc 1 54 1
 377 001a 1846     		mov	r0, r3
 378 001c 0C37     		adds	r7, r7, #12
 379              	.LCFI26:
 380              		.cfi_def_cfa_offset 4
 381 001e BD46     		mov	sp, r7
 382              	.LCFI27:
 383              		.cfi_def_cfa_register 13
 384              		@ sp needed
 385 0020 5DF8047B 		ldr	r7, [sp], #4
 386              	.LCFI28:
 387              		.cfi_restore 7
 388              		.cfi_def_cfa_offset 0
 389 0024 7047     		bx	lr
 390              		.cfi_endproc
 391              	.LFE4:
 393              		.text
 394              	.Letext0:
 395              		.file 2 "/Users/isikcanyilmaz/KODMOD/b607/test/mcu/tools/gcc9.2.1/mac/arm-none-eabi/include/machin
 396              		.file 3 "/Users/isikcanyilmaz/KODMOD/b607/test/mcu/tools/gcc9.2.1/mac/arm-none-eabi/include/sys/_s
 397              		.file 4 "/Users/isikcanyilmaz/KODMOD/b607/test/mcu/tools/gcc9.2.1/mac/arm-none-eabi/include/sys/lo
 398              		.file 5 "/Users/isikcanyilmaz/KODMOD/b607/test/mcu/tools/gcc9.2.1/mac/arm-none-eabi/include/sys/_t
 399              		.file 6 "/Users/isikcanyilmaz/KODMOD/b607/test/mcu/tools/gcc9.2.1/mac/lib/gcc/arm-none-eabi/9.2.1/
 400              		.file 7 "/Users/isikcanyilmaz/KODMOD/b607/test/mcu/tools/gcc9.2.1/mac/arm-none-eabi/include/sys/re
 401              		.file 8 "Inc/queue.h"
ARM GAS  /var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
/var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s:18     .text.Queue_Init:0000000000000000 $t
/var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s:26     .text.Queue_Init:0000000000000000 Queue_Init
/var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s:91     .text.Queue_Dequeue:0000000000000000 $t
/var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s:98     .text.Queue_Dequeue:0000000000000000 Queue_Dequeue
/var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s:197    .text.Queue_Enqueue:0000000000000000 $t
/var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s:204    .text.Queue_Enqueue:0000000000000000 Queue_Enqueue
/var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s:293    .text.Queue_GetSize:0000000000000000 $t
/var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s:300    .text.Queue_GetSize:0000000000000000 Queue_GetSize
/var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s:339    .text.Queue_IsFull:0000000000000000 $t
/var/folders/k7/81v8fz9j4v98_s0dd31l1wsr0000gn/T//ccKOrWnl.s:346    .text.Queue_IsFull:0000000000000000 Queue_IsFull

UNDEFINED SYMBOLS
memset
